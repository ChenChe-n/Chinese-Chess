int 判断移动合法性(char 棋子类型, sf::Vector2i 原位置, sf::Vector2i 目标位置, 象棋数据类& 象棋数据) {
    char 棋子种类 = abs(棋子类型);
    //std::cout << "棋子种类:" << int(棋子类型) << "\n";
    //std::cout << int(棋子种类) << "\n";
    //std::cout << 原位置.x << "\t" << 原位置.y << "\n";
    //std::cout << 目标位置.x << "\t" << 目标位置.y << "\n";
    int x移动量 = 目标位置.x - 原位置.x;
    int y移动量 = 目标位置.y - 原位置.y;
    int 可否移动 = 0;
    int x = 0;
    int y = 0;
    switch (棋子种类)
    {
    case 1://将限位
        if ((abs(x移动量) + abs(y移动量)) == 1)
        {
            if (目标位置.y <= 2 or 目标位置.y >= 7)
            {
                if (目标位置.x >= 3 and 目标位置.x <= 5)
                {
                    return 1;
                }
            }
        }
        break;
    case 2://士限位
        if (目标位置.y <= 2 or 目标位置.y >= 7)
        {
            if (目标位置.x >= 3 and 目标位置.x <= 5)
            {
                if (目标位置.x == 原位置.x + 1 and 目标位置.y == 原位置.y + 1)
                {
                    return 1;
                }
                if (目标位置.x == 原位置.x - 1 and 目标位置.y == 原位置.y - 1)
                {
                    return 1;
                }
                if (目标位置.x == 原位置.x - 1 and 目标位置.y == 原位置.y + 1)
                {
                    return 1;
                }
                if (目标位置.x == 原位置.x + 1 and 目标位置.y == 原位置.y - 1)
                {
                    return 1;
                }
            }
        }
        break;
    case 3:

        if (x移动量 == 2)
        {
            x = 1;
        }
        if (x移动量 == -2)
        {
            x = -1;
        }
        if (y移动量 == 2)
        {
            y = 1;
        }
        if (y移动量 == -2)
        {
            y = -1;
        }
        //std::cout << "目标位置xy:" << x << "\t" << y << "\n";
        if (x != 0 and y != 0)
        {
            //std::cout << "移动合法性:" << int(象棋数据.判断原点偏移后是否有棋(象棋数据.选取的棋子坐标, y, x))<< "\n";
            if (原位置.y >= 0)
            {
                if (目标位置.y <= 4)
                {
                    if (象棋数据.判断原点偏移后是否有棋(象棋数据.选取的棋子坐标, y, x) == 0)
                    {
                        return 1;
                    }
                }
            }
            if (原位置.y <= 9)
            {
                if (目标位置.y >= 5)
                {
                    if (象棋数据.判断原点偏移后是否有棋(象棋数据.选取的棋子坐标, y, x) == 0)
                    {
                        return 1;
                    }
                }
            }
        }
        break;
    case 4:
        if (x移动量 == 2 and (y移动量 == 1 or y移动量 == -1))
        {
            x = 1;
            y = 0;
        }
        if (x移动量 == -2 and (y移动量 == 1 or y移动量 == -1))
        {
            x = -1;
            y = 0;
        }
        if (y移动量 == -2 and (x移动量 == 1 or x移动量 == -1))
        {
            x = 0;
            y = -1;
        }
        if (y移动量 == 2 and (x移动量 == 1 or x移动量 == -1))
        {
            x = 0;
            y = 1;
        }
        std::cout << "移动xy:" << x << "\t" << y << "\n";
        if (象棋数据.判断原点偏移后是否有棋(象棋数据.选取的棋子坐标, y, x) == 0)
        {
            return 1;
        }
        break;
    case 5:
        if (x移动量 != 0 and y移动量 == 0)
        {
            if (x移动量 > 0)
            {
                for (int i = 原位置.x; i < 目标位置.x; i++)
                {
                    可否移动 += 象棋数据.判断原点偏移后是否有棋(象棋数据.选取的棋子坐标, y, i);
                }
            }
            else
            {
                for (int i = 原位置.x; i > 目标位置.x; i--) {
                    {
                        可否移动 += 象棋数据.判断原点偏移后是否有棋(象棋数据.选取的棋子坐标, y, i);
                    }
                }
            }
            if (y移动量 != 0 and x移动量 == 0)
            {
                if (y移动量 > 0)
                {
                    for (int i = 原位置.y; i < 目标位置.y; i++)
                    {
                        可否移动 += 象棋数据.判断原点偏移后是否有棋(象棋数据.选取的棋子坐标, i, x);
                    }
                }
                else
                {
                    for (int i = 原位置.y; i > 目标位置.y; i--)
                    {
                        可否移动 += 象棋数据.判断原点偏移后是否有棋(象棋数据.选取的棋子坐标, i, x);
                    }
                }
            }
            if (可否移动 == 0)
            {
                return 1;
            }
            break;
        }
        return 0;
    }
}